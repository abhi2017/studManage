!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@angular/forms","@angular/common"],t):t(e.angular2MultiselectDropdown=e.angular2MultiselectDropdown||{},e.ng.core,e.ng.forms,e.ng.common)}(this,function(e,t,i,l){"use strict";var s=function(){return function(){}}(),o=function(){return function(e,t){this.status=e,this.body=t}}(),n=function(){function e(e){this._elementRef=e,this.clickOutside=new t.EventEmitter}return e.prototype.onClick=function(e,t){t&&(this._elementRef.nativeElement.contains(t)||this.clickOutside.emit(e))},e}();n.decorators=[{type:t.Directive,args:[{selector:"[clickOutside]"}]}],n.ctorParameters=function(){return[{type:t.ElementRef}]},n.propDecorators={clickOutside:[{type:t.Output}],onClick:[{type:t.HostListener,args:["document:click",["$event","$event.target"]]}]};var c=function(){function e(){}return e.prototype.transform=function(e,t){var i=this;return e&&t?e.filter(function(e){return i.applyFilter(e,t)}):e},e.prototype.applyFilter=function(e,t){return!(t.itemName&&e.itemName&&-1===e.itemName.toLowerCase().indexOf(t.itemName.toLowerCase()))},e}();c.decorators=[{type:t.Pipe,args:[{name:"listFilter",pure:!1}]}],c.ctorParameters=function(){return[]};var r={provide:i.NG_VALUE_ACCESSOR,useExisting:t.forwardRef(function(){return d}),multi:!0},a=function(){},d=function(){function e(){this.onSelect=new t.EventEmitter,this.onDeSelect=new t.EventEmitter,this.onSelectAll=new t.EventEmitter,this.onDeSelectAll=new t.EventEmitter,this.isActive=!1,this.isSelectAll=!1,this.filter=new s,this.defaultSettings={singleSelection:!1,text:"Select",enableCheckAll:!0,selectAllText:"Select All",unSelectAllText:"UnSelect All",enableSearchFilter:!1,maxHeight:300,badgeShowLimit:999999999999,classes:"",disabled:!1,searchPlaceholderText:"Search"},this.onTouchedCallback=a,this.onChangeCallback=a}return e.prototype.ngOnInit=function(){this.settings=Object.assign(this.defaultSettings,this.settings)},e.prototype.ngDoCheck=function(){this.selectedItems&&(0==this.selectedItems.length||0==this.data.length||this.selectedItems.length<this.data.length)&&(this.isSelectAll=!1)},e.prototype.onItemClick=function(e,t){if(this.settings.disabled)return!1;var i=this.isSelected(e),l=this.selectedItems.length<this.settings.limitSelection;i?(this.removeSelected(e),this.onDeSelect.emit(e)):this.settings.limitSelection?l&&(this.addSelected(e),this.onSelect.emit(e)):(this.addSelected(e),this.onSelect.emit(e)),(this.isSelectAll||this.data.length>this.selectedItems.length)&&(this.isSelectAll=!1),this.data.length==this.selectedItems.length&&(this.isSelectAll=!0)},e.prototype.writeValue=function(e){if(void 0!==e&&null!==e)if(this.settings.singleSelection)try{if(e.length>1)throw this.selectedItems=[e[0]],new o(404,{msg:"Single Selection Mode, Selected Items cannot have more than one item."});this.selectedItems=e}catch(e){console.error(e.body.msg)}else this.settings.limitSelection?this.selectedItems=e.splice(0,this.settings.limitSelection):this.selectedItems=e,this.selectedItems.length===this.data.length&&this.data.length>0&&(this.isSelectAll=!0);else this.selectedItems=[]},e.prototype.registerOnChange=function(e){this.onChangeCallback=e},e.prototype.registerOnTouched=function(e){this.onTouchedCallback=e},e.prototype.trackByFn=function(e,t){return t.id},e.prototype.isSelected=function(e){var t=!1;return this.selectedItems&&this.selectedItems.forEach(function(i){e.id===i.id&&(t=!0)}),t},e.prototype.addSelected=function(e){this.settings.singleSelection?(this.selectedItems=[],this.selectedItems.push(e)):this.selectedItems.push(e),this.onChangeCallback(this.selectedItems)},e.prototype.removeSelected=function(e){var t=this;this.selectedItems&&this.selectedItems.forEach(function(i){e.id===i.id&&t.selectedItems.splice(t.selectedItems.indexOf(i),1)}),this.onChangeCallback(this.selectedItems)},e.prototype.toggleDropdown=function(e){this.isActive=!this.isActive,e.preventDefault()},e.prototype.closeDropdown=function(){this.isActive=!1},e.prototype.toggleSelectAll=function(){this.isSelectAll?(this.selectedItems=[],this.isSelectAll=!1,this.onChangeCallback(this.selectedItems),this.onDeSelectAll.emit(this.selectedItems)):(this.selectedItems=[],this.selectedItems=this.data.slice(),this.isSelectAll=!0,this.onChangeCallback(this.selectedItems),this.onSelectAll.emit(this.selectedItems))},e}();d.decorators=[{type:t.Component,args:[{selector:"angular2-multiselect",template:'<div class="cuppa-dropdown" (clickOutside)="closeDropdown()"> <div class="selected-list"> <button class="c-btn" (click)="toggleDropdown($event)" [disabled]="settings.disabled" [ngClass]="{\'disabled\': settings.disabled}"> <span *ngIf="selectedItems?.length == 0">{{settings.text}}</span> <span *ngIf="settings.singleSelection"> <span *ngFor="let item of selectedItems;trackBy: trackByFn;"> {{item.itemName}} </span> </span> <div class="c-list" *ngIf="selectedItems?.length > 0 && !settings.singleSelection"> <div class="c-token" *ngFor="let item of selectedItems;trackBy: trackByFn;let k = index" [hidden]="k > settings.badgeShowLimit-1"> <span class="c-label">{{item.itemName}}</span> <span class="fa fa-remove" (click)="onItemClick(item)" disabled="true"></span> </div> </div>  <span *ngIf="selectedItems?.length > settings.badgeShowLimit">+{{selectedItems?.length - settings.badgeShowLimit }}</span> <span class="fa" [ngClass]="{\'fa-angle-down\': !isActive,\'fa-angle-up\':isActive}"></span> </button>       </div> <div class="dropdown-list" [hidden]="!isActive"> <div class="arrow-up"></div> <div class="list-area"> <div class="pure-checkbox select-all" *ngIf="settings.enableCheckAll && !settings.singleSelection && !settings.limitSelection" (click)="toggleSelectAll()"> <input type="checkbox" [checked]="isSelectAll" [disabled]="settings.limitSelection == selectedItems?.length"/> <label> <span [hidden]="isSelectAll">{{settings.selectAllText}}</span> <span [hidden]="!isSelectAll">{{settings.unSelectAllText}}</span> </label> </div>    <div class="list-filter" *ngIf="settings.enableSearchFilter"> <span class="fa fa-search"></span> <input type="text" [placeholder]="settings.searchPlaceholderText" [(ngModel)]="filter.itemName"> </div>  <ul [style.maxHeight] = "settings.maxHeight+\'px\'"> <li *ngFor="let item of data | listFilter:filter; let i = index;" (click)="onItemClick(item,i)" class="pure-checkbox"> <input type="checkbox" [checked]="isSelected(item)" [disabled]="settings.limitSelection == selectedItems?.length && !isSelected(item)"/> <label>{{item.itemName}}</label> </li> </ul> <h5 class="list-message" *ngIf="data?.length == 0">No Data Available</h5> </div> </div> </div>',host:{"[class]":"defaultSettings.classes"},styles:['.cuppa-dropdown { position: relative; } .c-btn { display: inline-block; background: #fff; border: 1px solid #ccc; border-radius: 3px; font-size: 14px; color: #333; } .c-btn.disabled { background: #ccc; } .c-btn:focus { outline: none; } .selected-list .c-list { float: left; padding: 0px; margin: 0px; } .selected-list .c-list .c-token { list-style: none; padding: 0px 5px; background: #0079FE; color: #fff; border-radius: 2px; margin-right: 4px; float: left; } .selected-list .c-list .c-token .c-label { display: block; float: left; /*width: 50px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;*/ } .selected-list .c-list .c-token .fa-remove { margin-left: 1px; font-size: 12px; } .selected-list .fa-angle-down, .selected-list .fa-angle-up { font-size: 15pt; position: absolute; right: 10px; top: 25%; } .selected-list button { width: 100%; box-shadow: 0px 1px 5px #959595; padding: 10px; } .dropdown-list { position: absolute; padding-top: 14px; width: 100%; z-index: 9999; } .dropdown-list ul { padding: 0px; list-style: none; overflow: auto; margin: 0px; } .dropdown-list ul li { padding: 10px 10px; cursor: pointer; text-align: left; } .dropdown-list ul li:first-child { padding-top: 10px; } .dropdown-list ul li:last-child { padding-bottom: 10px; } .dropdown-list ul li:hover { background: #f5f5f5; } .dropdown-list ul::-webkit-scrollbar { width: 8px; } .dropdown-list ul::-webkit-scrollbar-thumb { background: #cccccc; border-radius: 5px; } .dropdown-list ul::-webkit-scrollbar-track { background: #f2f2f2; } .arrow-up { width: 0; height: 0; border-left: 13px solid transparent; border-right: 13px solid transparent; border-bottom: 15px solid #fff; margin-left: 15px; position: absolute; top: 0; } .list-area { border: 1px solid #ccc; border-radius: 3px; background: #fff; margin: 0px; box-shadow: 0px 1px 5px #959595; } .select-all { padding: 10px; border-bottom: 1px solid #ccc; text-align: left; } .list-filter { border-bottom: 1px solid #ccc; position: relative; } .list-filter input { border: 0px; width: 100%; height: 35px; padding: 0px 0px 0px 35px; } .list-filter input:focus { outline: none; } .list-filter .fa { position: absolute; top: 10px; left: 13px; color: #888; } .pure-checkbox input[type="checkbox"] { border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } .pure-checkbox input[type="checkbox"]:focus + label:before, .pure-checkbox input[type="checkbox"]:hover + label:before { border-color: #0079FE; background-color: #f2f2f2; } .pure-checkbox input[type="checkbox"]:active + label:before { transition-duration: 0s; } .pure-checkbox input[type="checkbox"] + label { position: relative; padding-left: 2em; vertical-align: middle; user-select: none; cursor: pointer; margin: 0px; color: #000; } .pure-checkbox input[type="checkbox"] + label:before { box-sizing: content-box; content: \'\'; color: #0079FE; position: absolute; top: 50%; left: 0; width: 14px; height: 14px; margin-top: -9px; border: 2px solid #0079FE; text-align: center; transition: all 0.4s ease; } .pure-checkbox input[type="checkbox"] + label:after { box-sizing: content-box; content: \'\'; background-color: #0079FE; position: absolute; top: 50%; left: 4px; width: 10px; height: 10px; margin-top: -5px; transform: scale(0); transform-origin: 50%; transition: transform 200ms ease-out; } .pure-checkbox input[type="checkbox"]:disabled + label:before { border-color: #cccccc; } .pure-checkbox input[type="checkbox"]:disabled:focus + label:before .pure-checkbox input[type="checkbox"]:disabled:hover + label:before { background-color: inherit; } .pure-checkbox input[type="checkbox"]:disabled:checked + label:before { background-color: #cccccc; } .pure-checkbox input[type="checkbox"] + label:after { background-color: transparent; top: 50%; left: 4px; width: 8px; height: 3px; margin-top: -4px; border-style: solid; border-color: #ffffff; border-width: 0 0 3px 3px; border-image: none; transform: rotate(-45deg) scale(0); } .pure-checkbox input[type="checkbox"]:checked + label:after { content: \'\'; transform: rotate(-45deg) scale(1); transition: transform 200ms ease-out; } .pure-checkbox input[type="radio"]:checked + label:before { animation: borderscale 300ms ease-in; background-color: white; } .pure-checkbox input[type="radio"]:checked + label:after { transform: scale(1); } .pure-checkbox input[type="radio"] + label:before { border-radius: 50%; } .pure-checkbox input[type="checkbox"]:checked + label:before { animation: borderscale 200ms ease-in; background: #0079FE; } .pure-checkbox input[type="checkbox"]:checked + label:after { transform: rotate(-45deg) scale(1); } @keyframes borderscale { 50% { box-shadow: 0 0 0 2px #0079FE; } } .list-message { text-align: center; } '],providers:[r]}]}],d.ctorParameters=function(){return[]},d.propDecorators={data:[{type:t.Input}],settings:[{type:t.Input}],onSelect:[{type:t.Output,args:["onSelect"]}],onDeSelect:[{type:t.Output,args:["onDeSelect"]}],onSelectAll:[{type:t.Output,args:["onSelectAll"]}],onDeSelectAll:[{type:t.Output,args:["onDeSelectAll"]}]};var p=function(){return function(){}}();p.decorators=[{type:t.NgModule,args:[{imports:[l.CommonModule,i.FormsModule],declarations:[d,n,c],exports:[d,n,c]}]}],p.ctorParameters=function(){return[]},e.AngularMultiSelect=d,e.ClickOutsideDirective=n,e.ListFilterPipe=c,e.AngularMultiSelectModule=p,e.ɵa=r,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=angular2-multiselect-dropdown.umd.min.js.map
