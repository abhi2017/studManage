{"version":3,"file":"angular2-multiselect-dropdown.umd.min.js","sources":["../../out-tsc/lib/src/angular2-multiselect-dropdown/multiselect.model.ts","../../out-tsc/lib/src/angular2-multiselect-dropdown/clickOutside.ts","../../out-tsc/lib/src/angular2-multiselect-dropdown/list-filter.ts","../../out-tsc/lib/src/angular2-multiselect-dropdown/multiselect.component.ts"],"sourcesContent":["\nexport class ListItem{\r\n    id: Number;\r\n    itemName: String\r\n}\n\nfunction ListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nListItem.prototype.id;\n/** @type {?} */\nListItem.prototype.itemName;\n}\n\nexport class MyException {\r\n\tstatus : number;\r\n\tbody : any;\n/**\n * @param {?} status\n * @param {?} body\n */\nconstructor(status : number, body : any) {\r\n\t\tthis.status = status;\r\n\t\tthis.body = body;\r\n\t}\r\n\t\r\n}\n\nfunction MyException_tsickle_Closure_declarations() {\n/** @type {?} */\nMyException.prototype.status;\n/** @type {?} */\nMyException.prototype.body;\n}\n","import {Directive, ElementRef, Output, EventEmitter, HostListener} from '@angular/core';\nexport class ClickOutsideDirective {\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\r\n    }\npublic clickOutside = new EventEmitter<MouseEvent>();\n/**\n * @param {?} event\n * @param {?} targetElement\n * @return {?}\n */\npublic onClick(event: MouseEvent, targetElement: HTMLElement): void {\r\n        if (!targetElement) {\r\n            return;\r\n        }\r\n\r\n        const /** @type {?} */ clickedInside = this._elementRef.nativeElement.contains(targetElement);\r\n        if (!clickedInside) {\r\n            this.clickOutside.emit(event);\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[clickOutside]'\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'clickOutside': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['document:click', ['$event', '$event.target'], ] },],\n};\n}\n\nfunction ClickOutsideDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nClickOutsideDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nClickOutsideDirective.ctorParameters;\n/** @type {?} */\nClickOutsideDirective.propDecorators;\n/** @type {?} */\nClickOutsideDirective.prototype.clickOutside;\n/** @type {?} */\nClickOutsideDirective.prototype._elementRef;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { ListItem } from './multiselect.model';\nexport class ListFilterPipe implements PipeTransform {\n/**\n * @param {?} items\n * @param {?} filter\n * @return {?}\n */\ntransform(items: ListItem[], filter: ListItem): ListItem[] {\r\n        if (!items || !filter) {\r\n            return items;\r\n        }\r\n        // filter items array, items which match and return true will be kept, false will be filtered out\r\n        return items.filter((item: ListItem) => this.applyFilter(item, filter));\r\n    }\n/**\n * Perform the filtering.\r\r\\@param {Book} book The book to compare to the filter.\r\\@param {Book} filter The filter to apply.\r\\@return {boolean} True if book satisfies filters, false if not.\n * @param {?} item\n * @param {?} filter\n * @return {?}\n */\napplyFilter(item: ListItem, filter: ListItem): boolean {\r\n        return !(filter.itemName && item.itemName && item.itemName.toLowerCase().indexOf(filter.itemName.toLowerCase()) === -1);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n    name: 'listFilter',\r\n    pure: false\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ListFilterPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nListFilterPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nListFilterPipe.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, NgModule, OnChanges, ViewEncapsulation,forwardRef, Input, Output, EventEmitter, ElementRef, AfterViewInit, Pipe, PipeTransform } from '@angular/core';\r\nimport { FormsModule, NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ListItem , MyException} from './multiselect.model';\r\nimport { DropdownSettings } from './multiselect.interface';\r\nimport { ClickOutsideDirective } from './clickOutside';\r\nimport { ListFilterPipe } from './list-filter';\r\n\r\nexport const /** @type {?} */ DROPDOWN_CONTROL_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AngularMultiSelect),\r\n    multi: true\r\n};\r\nconst /** @type {?} */ noop = () => {\r\n};\nexport class AngularMultiSelect implements OnInit, ControlValueAccessor {\r\n\r\n     \r\n    data: Array<ListItem>;\r\n    \r\n    \r\n    settings:DropdownSettings;\r\n    \r\n    \r\n    onSelect: EventEmitter<ListItem> = new EventEmitter<ListItem>();\r\n\r\n    \r\n    onDeSelect: EventEmitter<ListItem> = new EventEmitter<ListItem>();\r\n\r\n    \r\n    onSelectAll: EventEmitter<Array<ListItem>> = new EventEmitter<Array<ListItem>>();\r\n\r\n    \r\n    onDeSelectAll: EventEmitter<Array<ListItem>> = new EventEmitter<Array<ListItem>>();\npublic selectedItems: Array<ListItem>;\npublic isActive: boolean = false;\npublic isSelectAll: boolean = false;\r\n    filter: ListItem = new ListItem();\r\n    defaultSettings:DropdownSettings = {\r\n        singleSelection: false,\r\n        text:'Select',\r\n        enableCheckAll: true,\r\n        selectAllText: 'Select All',\r\n        unSelectAllText: 'UnSelect All',\r\n        enableSearchFilter: false,\r\n        maxHeight: 300,\r\n        badgeShowLimit: 999999999999,\r\n        classes:'',\r\n        disabled: false,\r\n        searchPlaceholderText: 'Search'\r\n    }\nconstructor(){\r\n\r\n    }\n/**\n * @return {?}\n */\nngOnInit(){\r\n         this.settings = Object.assign(this.defaultSettings, this.settings);\r\n    }\n/**\n * @return {?}\n */\nngDoCheck(){\r\n        if(this.selectedItems){\r\n            if(this.selectedItems.length == 0 || this.data.length == 0 || this.selectedItems.length < this.data.length){\r\n                this.isSelectAll = false;\r\n            }\r\n        }\r\n    }\n/**\n * @param {?} item\n * @param {?} index\n * @return {?}\n */\nonItemClick(item: ListItem, index: number){\r\n\r\n                if(this.settings.disabled){\r\n                    return false;\r\n                }\r\n        \r\n                let /** @type {?} */ found = this.isSelected(item);\r\n                let /** @type {?} */ limit = this.selectedItems.length < this.settings.limitSelection ? true : false;\r\n\r\n                if(!found){\r\n                    if(this.settings.limitSelection){\r\n                        if(limit){\r\n                            this.addSelected(item);\r\n                            this.onSelect.emit(item);\r\n                        } \r\n                    }\r\n                    else{\r\n                        this.addSelected(item);\r\n                        this.onSelect.emit(item);\r\n                    }\r\n                    \r\n                }\r\n                else{\r\n                this.removeSelected(item);\r\n                    this.onDeSelect.emit(item);\r\n                }\r\n                if(this.isSelectAll || this.data.length > this.selectedItems.length){\r\n                    this.isSelectAll = false;\r\n                }\r\n                if(this.data.length == this.selectedItems.length){\r\n                    this.isSelectAll = true;\r\n                }    \r\n    }\nprivate onTouchedCallback: () => void = noop;\nprivate onChangeCallback: (_: any) => void = noop;\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\r\n        if (value !== undefined && value !== null) {\r\n            if(this.settings.singleSelection){\r\n                try{\r\n                    \r\n                    if(value.length > 1){\r\n                        this.selectedItems = [value[0]];\r\n                        throw new MyException(404, { \"msg\": \"Single Selection Mode, Selected Items cannot have more than one item.\" });\r\n                    }\r\n                    else{\r\n                        this.selectedItems = value;\r\n                    }\r\n                }\r\n                catch( /** @type {?} */e){\r\n                    console.error(e.body.msg);\r\n                }\r\n                \r\n            }\r\n            else{\r\n                if(this.settings.limitSelection){\r\n                            this.selectedItems = value.splice(0,this.settings.limitSelection);\r\n                        }\r\n                 else{\r\n                        this.selectedItems = value;\r\n                    }\r\n                if(this.selectedItems.length === this.data.length && this.data.length > 0){\r\n                            this.isSelectAll = true;\r\n                        }\r\n            }\r\n        } else {\r\n            this.selectedItems = [];\r\n        }\r\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any) {\r\n        this.onChangeCallback = fn;\r\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any) {\r\n        this.onTouchedCallback = fn;\r\n    }\n/**\n * @param {?} index\n * @param {?} item\n * @return {?}\n */\ntrackByFn(index: number, item: ListItem){\r\n        return item.id;\r\n    }\n/**\n * @param {?} clickedItem\n * @return {?}\n */\nisSelected(clickedItem:ListItem){\r\n        let /** @type {?} */ found = false;\r\n        this.selectedItems && this.selectedItems.forEach(item => {\r\n           if(clickedItem.id === item.id){\r\n               found = true;\r\n           }\r\n        });\r\n        return found;\r\n    }\n/**\n * @param {?} item\n * @return {?}\n */\naddSelected(item: ListItem){\r\n        if(this.settings.singleSelection){\r\n            this.selectedItems = [];\r\n            this.selectedItems.push(item);\r\n        }\r\n        else\r\n            this.selectedItems.push(item);\r\n            this.onChangeCallback(this.selectedItems);\r\n    }\n/**\n * @param {?} clickedItem\n * @return {?}\n */\nremoveSelected(clickedItem: ListItem){\r\n        this.selectedItems && this.selectedItems.forEach(item => {\r\n           if(clickedItem.id === item.id){\r\n               this.selectedItems.splice(this.selectedItems.indexOf(item),1);\r\n           }\r\n        });    \r\n        this.onChangeCallback(this.selectedItems);\r\n    }\n/**\n * @param {?} evt\n * @return {?}\n */\ntoggleDropdown(evt: any){\r\n        this.isActive = !this.isActive;\r\n        evt.preventDefault();\r\n    }\n/**\n * @return {?}\n */\ncloseDropdown(){\r\n        this.isActive = false;\r\n    }\n/**\n * @return {?}\n */\ntoggleSelectAll(){\r\n        if(!this.isSelectAll){\r\n            this.selectedItems = [];\r\n            this.selectedItems = this.data.slice();\r\n            this.isSelectAll = true;\r\n            this.onChangeCallback(this.selectedItems);\r\n            this.onSelectAll.emit(this.selectedItems);\r\n        }\r\n        else{\r\n            this.selectedItems = [];\r\n            this.isSelectAll = false;\r\n            this.onChangeCallback(this.selectedItems);\r\n            this.onDeSelectAll.emit(this.selectedItems);\r\n        }     \r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector:'angular2-multiselect',\r\n    template: \"<div class=\\\"cuppa-dropdown\\\" (clickOutside)=\\\"closeDropdown()\\\"> <div class=\\\"selected-list\\\"> <button class=\\\"c-btn\\\" (click)=\\\"toggleDropdown($event)\\\" [disabled]=\\\"settings.disabled\\\" [ngClass]=\\\"{'disabled': settings.disabled}\\\"> <span *ngIf=\\\"selectedItems?.length == 0\\\">{{settings.text}}</span> <span *ngIf=\\\"settings.singleSelection\\\"> <span *ngFor=\\\"let item of selectedItems;trackBy: trackByFn;\\\"> {{item.itemName}} </span> </span> <div class=\\\"c-list\\\" *ngIf=\\\"selectedItems?.length > 0 && !settings.singleSelection\\\"> <div class=\\\"c-token\\\" *ngFor=\\\"let item of selectedItems;trackBy: trackByFn;let k = index\\\" [hidden]=\\\"k > settings.badgeShowLimit-1\\\"> <span class=\\\"c-label\\\">{{item.itemName}}</span> <span class=\\\"fa fa-remove\\\" (click)=\\\"onItemClick(item)\\\" disabled=\\\"true\\\"></span> </div> </div>  <span *ngIf=\\\"selectedItems?.length > settings.badgeShowLimit\\\">+{{selectedItems?.length - settings.badgeShowLimit }}</span> <span class=\\\"fa\\\" [ngClass]=\\\"{'fa-angle-down': !isActive,'fa-angle-up':isActive}\\\"></span> </button>       </div> <div class=\\\"dropdown-list\\\" [hidden]=\\\"!isActive\\\"> <div class=\\\"arrow-up\\\"></div> <div class=\\\"list-area\\\"> <div class=\\\"pure-checkbox select-all\\\" *ngIf=\\\"settings.enableCheckAll && !settings.singleSelection && !settings.limitSelection\\\" (click)=\\\"toggleSelectAll()\\\"> <input type=\\\"checkbox\\\" [checked]=\\\"isSelectAll\\\" [disabled]=\\\"settings.limitSelection == selectedItems?.length\\\"/> <label> <span [hidden]=\\\"isSelectAll\\\">{{settings.selectAllText}}</span> <span [hidden]=\\\"!isSelectAll\\\">{{settings.unSelectAllText}}</span> </label> </div>    <div class=\\\"list-filter\\\" *ngIf=\\\"settings.enableSearchFilter\\\"> <span class=\\\"fa fa-search\\\"></span> <input type=\\\"text\\\" [placeholder]=\\\"settings.searchPlaceholderText\\\" [(ngModel)]=\\\"filter.itemName\\\"> </div>  <ul [style.maxHeight] = \\\"settings.maxHeight+'px'\\\"> <li *ngFor=\\\"let item of data | listFilter:filter; let i = index;\\\" (click)=\\\"onItemClick(item,i)\\\" class=\\\"pure-checkbox\\\"> <input type=\\\"checkbox\\\" [checked]=\\\"isSelected(item)\\\" [disabled]=\\\"settings.limitSelection == selectedItems?.length && !isSelected(item)\\\"/> <label>{{item.itemName}}</label> </li> </ul> <h5 class=\\\"list-message\\\" *ngIf=\\\"data?.length == 0\\\">No Data Available</h5> </div> </div> </div>\",\r\n    host: { '[class]' : 'defaultSettings.classes'  },\r\n    styles: [\".cuppa-dropdown { position: relative; } .c-btn { display: inline-block; background: #fff; border: 1px solid #ccc; border-radius: 3px; font-size: 14px; color: #333; } .c-btn.disabled { background: #ccc; } .c-btn:focus { outline: none; } .selected-list .c-list { float: left; padding: 0px; margin: 0px; } .selected-list .c-list .c-token { list-style: none; padding: 0px 5px; background: #0079FE; color: #fff; border-radius: 2px; margin-right: 4px; float: left; } .selected-list .c-list .c-token .c-label { display: block; float: left; /*width: 50px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;*/ } .selected-list .c-list .c-token .fa-remove { margin-left: 1px; font-size: 12px; } .selected-list .fa-angle-down, .selected-list .fa-angle-up { font-size: 15pt; position: absolute; right: 10px; top: 25%; } .selected-list button { width: 100%; box-shadow: 0px 1px 5px #959595; padding: 10px; } .dropdown-list { position: absolute; padding-top: 14px; width: 100%; z-index: 9999; } .dropdown-list ul { padding: 0px; list-style: none; overflow: auto; margin: 0px; } .dropdown-list ul li { padding: 10px 10px; cursor: pointer; text-align: left; } .dropdown-list ul li:first-child { padding-top: 10px; } .dropdown-list ul li:last-child { padding-bottom: 10px; } .dropdown-list ul li:hover { background: #f5f5f5; } .dropdown-list ul::-webkit-scrollbar { width: 8px; } .dropdown-list ul::-webkit-scrollbar-thumb { background: #cccccc; border-radius: 5px; } .dropdown-list ul::-webkit-scrollbar-track { background: #f2f2f2; } .arrow-up { width: 0; height: 0; border-left: 13px solid transparent; border-right: 13px solid transparent; border-bottom: 15px solid #fff; margin-left: 15px; position: absolute; top: 0; } .list-area { border: 1px solid #ccc; border-radius: 3px; background: #fff; margin: 0px; box-shadow: 0px 1px 5px #959595; } .select-all { padding: 10px; border-bottom: 1px solid #ccc; text-align: left; } .list-filter { border-bottom: 1px solid #ccc; position: relative; } .list-filter input { border: 0px; width: 100%; height: 35px; padding: 0px 0px 0px 35px; } .list-filter input:focus { outline: none; } .list-filter .fa { position: absolute; top: 10px; left: 13px; color: #888; } .pure-checkbox input[type=\\\"checkbox\\\"] { border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } .pure-checkbox input[type=\\\"checkbox\\\"]:focus + label:before, .pure-checkbox input[type=\\\"checkbox\\\"]:hover + label:before { border-color: #0079FE; background-color: #f2f2f2; } .pure-checkbox input[type=\\\"checkbox\\\"]:active + label:before { transition-duration: 0s; } .pure-checkbox input[type=\\\"checkbox\\\"] + label { position: relative; padding-left: 2em; vertical-align: middle; user-select: none; cursor: pointer; margin: 0px; color: #000; } .pure-checkbox input[type=\\\"checkbox\\\"] + label:before { box-sizing: content-box; content: ''; color: #0079FE; position: absolute; top: 50%; left: 0; width: 14px; height: 14px; margin-top: -9px; border: 2px solid #0079FE; text-align: center; transition: all 0.4s ease; } .pure-checkbox input[type=\\\"checkbox\\\"] + label:after { box-sizing: content-box; content: ''; background-color: #0079FE; position: absolute; top: 50%; left: 4px; width: 10px; height: 10px; margin-top: -5px; transform: scale(0); transform-origin: 50%; transition: transform 200ms ease-out; } .pure-checkbox input[type=\\\"checkbox\\\"]:disabled + label:before { border-color: #cccccc; } .pure-checkbox input[type=\\\"checkbox\\\"]:disabled:focus + label:before .pure-checkbox input[type=\\\"checkbox\\\"]:disabled:hover + label:before { background-color: inherit; } .pure-checkbox input[type=\\\"checkbox\\\"]:disabled:checked + label:before { background-color: #cccccc; } .pure-checkbox input[type=\\\"checkbox\\\"] + label:after { background-color: transparent; top: 50%; left: 4px; width: 8px; height: 3px; margin-top: -4px; border-style: solid; border-color: #ffffff; border-width: 0 0 3px 3px; border-image: none; transform: rotate(-45deg) scale(0); } .pure-checkbox input[type=\\\"checkbox\\\"]:checked + label:after { content: ''; transform: rotate(-45deg) scale(1); transition: transform 200ms ease-out; } .pure-checkbox input[type=\\\"radio\\\"]:checked + label:before { animation: borderscale 300ms ease-in; background-color: white; } .pure-checkbox input[type=\\\"radio\\\"]:checked + label:after { transform: scale(1); } .pure-checkbox input[type=\\\"radio\\\"] + label:before { border-radius: 50%; } .pure-checkbox input[type=\\\"checkbox\\\"]:checked + label:before { animation: borderscale 200ms ease-in; background: #0079FE; } .pure-checkbox input[type=\\\"checkbox\\\"]:checked + label:after { transform: rotate(-45deg) scale(1); } @keyframes borderscale { 50% { box-shadow: 0 0 0 2px #0079FE; } } .list-message { text-align: center; } \"],\r\n    providers: [DROPDOWN_CONTROL_VALUE_ACCESSOR]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'data': [{ type: Input },],\n'settings': [{ type: Input },],\n'onSelect': [{ type: Output, args: ['onSelect', ] },],\n'onDeSelect': [{ type: Output, args: ['onDeSelect', ] },],\n'onSelectAll': [{ type: Output, args: ['onSelectAll', ] },],\n'onDeSelectAll': [{ type: Output, args: ['onDeSelectAll', ] },],\n};\n}\n\nfunction AngularMultiSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularMultiSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAngularMultiSelect.ctorParameters;\n/** @type {?} */\nAngularMultiSelect.propDecorators;\n/** @type {?} */\nAngularMultiSelect.prototype.data;\n/** @type {?} */\nAngularMultiSelect.prototype.settings;\n/** @type {?} */\nAngularMultiSelect.prototype.onSelect;\n/** @type {?} */\nAngularMultiSelect.prototype.onDeSelect;\n/** @type {?} */\nAngularMultiSelect.prototype.onSelectAll;\n/** @type {?} */\nAngularMultiSelect.prototype.onDeSelectAll;\n/** @type {?} */\nAngularMultiSelect.prototype.selectedItems;\n/** @type {?} */\nAngularMultiSelect.prototype.isActive;\n/** @type {?} */\nAngularMultiSelect.prototype.isSelectAll;\n/** @type {?} */\nAngularMultiSelect.prototype.filter;\n/** @type {?} */\nAngularMultiSelect.prototype.defaultSettings;\n/** @type {?} */\nAngularMultiSelect.prototype.onTouchedCallback;\n/** @type {?} */\nAngularMultiSelect.prototype.onChangeCallback;\n}\n\nexport class AngularMultiSelectModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports:      [ CommonModule,FormsModule ],\r\n  declarations: [AngularMultiSelect, ClickOutsideDirective, ListFilterPipe],\r\n  exports:      [AngularMultiSelect, ClickOutsideDirective, ListFilterPipe]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AngularMultiSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularMultiSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAngularMultiSelectModule.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["status","body","this","_elementRef","EventEmitter","ClickOutsideDirective","event","targetElement","nativeElement","contains","clickOutside","emit","type","Directive","args","selector","ElementRef","Output","onClick","HostListener","ListFilterPipe","items","filter","item","_this","applyFilter","itemName","toLowerCase","indexOf","Pipe","name","pure","DROPDOWN_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","AngularMultiSelect","multi","noop","ListItem","singleSelection","text","enableCheckAll","selectAllText","unSelectAllText","enableSearchFilter","maxHeight","badgeShowLimit","classes","disabled","searchPlaceholderText","settings","Object","assign","defaultSettings","selectedItems","length","data","isSelectAll","index","found","isSelected","limit","limitSelection","removeSelected","onDeSelect","addSelected","onSelect","value","undefined","MyException","msg","e","console","error","splice","fn","onChangeCallback","onTouchedCallback","id","clickedItem","forEach","push","evt","isActive","preventDefault","onDeSelectAll","slice","onSelectAll","Component","template","host","[class]","styles","providers","Input","NgModule","imports","CommonModule","FormsModule","declarations","exports","AngularMultiSelectModule"],"mappings":"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"}