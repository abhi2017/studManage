(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
	(factory((global.angular2MultiselectDropdown = global.angular2MultiselectDropdown || {}),global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (exports,_angular_core,_angular_forms,_angular_common) { 'use strict';

var ListItem = (function () {
    function ListItem() {
    }
    return ListItem;
}());
var MyException = (function () {
    /**
     * @param {?} status
     * @param {?} body
     */
    function MyException(status, body) {
        this.status = status;
        this.body = body;
    }
    return MyException;
}());

var ClickOutsideDirective = (function () {
    /**
     * @param {?} _elementRef
     */
    function ClickOutsideDirective(_elementRef) {
        this._elementRef = _elementRef;
        this.clickOutside = new _angular_core.EventEmitter();
    }
    /**
     * @param {?} event
     * @param {?} targetElement
     * @return {?}
     */
    ClickOutsideDirective.prototype.onClick = function (event, targetElement) {
        if (!targetElement) {
            return;
        }
        var /** @type {?} */ clickedInside = this._elementRef.nativeElement.contains(targetElement);
        if (!clickedInside) {
            this.clickOutside.emit(event);
        }
    };
    return ClickOutsideDirective;
}());
ClickOutsideDirective.decorators = [
    { type: _angular_core.Directive, args: [{
                selector: '[clickOutside]'
            },] },
];
/**
 * @nocollapse
 */
ClickOutsideDirective.ctorParameters = function () { return [
    { type: _angular_core.ElementRef, },
]; };
ClickOutsideDirective.propDecorators = {
    'clickOutside': [{ type: _angular_core.Output },],
    'onClick': [{ type: _angular_core.HostListener, args: ['document:click', ['$event', '$event.target'],] },],
};

var ListFilterPipe = (function () {
    function ListFilterPipe() {
    }
    /**
     * @param {?} items
     * @param {?} filter
     * @return {?}
     */
    ListFilterPipe.prototype.transform = function (items, filter) {
        var _this = this;
        if (!items || !filter) {
            return items;
        }
        // filter items array, items which match and return true will be kept, false will be filtered out
        return items.filter(function (item) { return _this.applyFilter(item, filter); });
    };
    /**
     * Perform the filtering.
    
    \@param {Book} book The book to compare to the filter.
    \@param {Book} filter The filter to apply.
    \@return {boolean} True if book satisfies filters, false if not.
     * @param {?} item
     * @param {?} filter
     * @return {?}
     */
    ListFilterPipe.prototype.applyFilter = function (item, filter) {
        return !(filter.itemName && item.itemName && item.itemName.toLowerCase().indexOf(filter.itemName.toLowerCase()) === -1);
    };
    return ListFilterPipe;
}());
ListFilterPipe.decorators = [
    { type: _angular_core.Pipe, args: [{
                name: 'listFilter',
                pure: false
            },] },
];
/**
 * @nocollapse
 */
ListFilterPipe.ctorParameters = function () { return []; };

var DROPDOWN_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms.NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function () { return AngularMultiSelect; }),
    multi: true
};
var noop = function () {
};
var AngularMultiSelect = (function () {
    function AngularMultiSelect() {
        this.onSelect = new _angular_core.EventEmitter();
        this.onDeSelect = new _angular_core.EventEmitter();
        this.onSelectAll = new _angular_core.EventEmitter();
        this.onDeSelectAll = new _angular_core.EventEmitter();
        this.isActive = false;
        this.isSelectAll = false;
        this.filter = new ListItem();
        this.defaultSettings = {
            singleSelection: false,
            text: 'Select',
            enableCheckAll: true,
            selectAllText: 'Select All',
            unSelectAllText: 'UnSelect All',
            enableSearchFilter: false,
            maxHeight: 300,
            badgeShowLimit: 999999999999,
            classes: '',
            disabled: false,
            searchPlaceholderText: 'Search'
        };
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
    }
    /**
     * @return {?}
     */
    AngularMultiSelect.prototype.ngOnInit = function () {
        this.settings = Object.assign(this.defaultSettings, this.settings);
    };
    /**
     * @return {?}
     */
    AngularMultiSelect.prototype.ngDoCheck = function () {
        if (this.selectedItems) {
            if (this.selectedItems.length == 0 || this.data.length == 0 || this.selectedItems.length < this.data.length) {
                this.isSelectAll = false;
            }
        }
    };
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    AngularMultiSelect.prototype.onItemClick = function (item, index) {
        if (this.settings.disabled) {
            return false;
        }
        var /** @type {?} */ found = this.isSelected(item);
        var /** @type {?} */ limit = this.selectedItems.length < this.settings.limitSelection ? true : false;
        if (!found) {
            if (this.settings.limitSelection) {
                if (limit) {
                    this.addSelected(item);
                    this.onSelect.emit(item);
                }
            }
            else {
                this.addSelected(item);
                this.onSelect.emit(item);
            }
        }
        else {
            this.removeSelected(item);
            this.onDeSelect.emit(item);
        }
        if (this.isSelectAll || this.data.length > this.selectedItems.length) {
            this.isSelectAll = false;
        }
        if (this.data.length == this.selectedItems.length) {
            this.isSelectAll = true;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AngularMultiSelect.prototype.writeValue = function (value) {
        if (value !== undefined && value !== null) {
            if (this.settings.singleSelection) {
                try {
                    if (value.length > 1) {
                        this.selectedItems = [value[0]];
                        throw new MyException(404, { "msg": "Single Selection Mode, Selected Items cannot have more than one item." });
                    }
                    else {
                        this.selectedItems = value;
                    }
                }
                catch (e) {
                    console.error(e.body.msg);
                }
            }
            else {
                if (this.settings.limitSelection) {
                    this.selectedItems = value.splice(0, this.settings.limitSelection);
                }
                else {
                    this.selectedItems = value;
                }
                if (this.selectedItems.length === this.data.length && this.data.length > 0) {
                    this.isSelectAll = true;
                }
            }
        }
        else {
            this.selectedItems = [];
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    AngularMultiSelect.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    AngularMultiSelect.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    AngularMultiSelect.prototype.trackByFn = function (index, item) {
        return item.id;
    };
    /**
     * @param {?} clickedItem
     * @return {?}
     */
    AngularMultiSelect.prototype.isSelected = function (clickedItem) {
        var /** @type {?} */ found = false;
        this.selectedItems && this.selectedItems.forEach(function (item) {
            if (clickedItem.id === item.id) {
                found = true;
            }
        });
        return found;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    AngularMultiSelect.prototype.addSelected = function (item) {
        if (this.settings.singleSelection) {
            this.selectedItems = [];
            this.selectedItems.push(item);
        }
        else
            this.selectedItems.push(item);
        this.onChangeCallback(this.selectedItems);
    };
    /**
     * @param {?} clickedItem
     * @return {?}
     */
    AngularMultiSelect.prototype.removeSelected = function (clickedItem) {
        var _this = this;
        this.selectedItems && this.selectedItems.forEach(function (item) {
            if (clickedItem.id === item.id) {
                _this.selectedItems.splice(_this.selectedItems.indexOf(item), 1);
            }
        });
        this.onChangeCallback(this.selectedItems);
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    AngularMultiSelect.prototype.toggleDropdown = function (evt) {
        this.isActive = !this.isActive;
        evt.preventDefault();
    };
    /**
     * @return {?}
     */
    AngularMultiSelect.prototype.closeDropdown = function () {
        this.isActive = false;
    };
    /**
     * @return {?}
     */
    AngularMultiSelect.prototype.toggleSelectAll = function () {
        if (!this.isSelectAll) {
            this.selectedItems = [];
            this.selectedItems = this.data.slice();
            this.isSelectAll = true;
            this.onChangeCallback(this.selectedItems);
            this.onSelectAll.emit(this.selectedItems);
        }
        else {
            this.selectedItems = [];
            this.isSelectAll = false;
            this.onChangeCallback(this.selectedItems);
            this.onDeSelectAll.emit(this.selectedItems);
        }
    };
    return AngularMultiSelect;
}());
AngularMultiSelect.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'angular2-multiselect',
                template: "<div class=\"cuppa-dropdown\" (clickOutside)=\"closeDropdown()\"> <div class=\"selected-list\"> <button class=\"c-btn\" (click)=\"toggleDropdown($event)\" [disabled]=\"settings.disabled\" [ngClass]=\"{'disabled': settings.disabled}\"> <span *ngIf=\"selectedItems?.length == 0\">{{settings.text}}</span> <span *ngIf=\"settings.singleSelection\"> <span *ngFor=\"let item of selectedItems;trackBy: trackByFn;\"> {{item.itemName}} </span> </span> <div class=\"c-list\" *ngIf=\"selectedItems?.length > 0 && !settings.singleSelection\"> <div class=\"c-token\" *ngFor=\"let item of selectedItems;trackBy: trackByFn;let k = index\" [hidden]=\"k > settings.badgeShowLimit-1\"> <span class=\"c-label\">{{item.itemName}}</span> <span class=\"fa fa-remove\" (click)=\"onItemClick(item)\" disabled=\"true\"></span> </div> </div>  <span *ngIf=\"selectedItems?.length > settings.badgeShowLimit\">+{{selectedItems?.length - settings.badgeShowLimit }}</span> <span class=\"fa\" [ngClass]=\"{'fa-angle-down': !isActive,'fa-angle-up':isActive}\"></span> </button>       </div> <div class=\"dropdown-list\" [hidden]=\"!isActive\"> <div class=\"arrow-up\"></div> <div class=\"list-area\"> <div class=\"pure-checkbox select-all\" *ngIf=\"settings.enableCheckAll && !settings.singleSelection && !settings.limitSelection\" (click)=\"toggleSelectAll()\"> <input type=\"checkbox\" [checked]=\"isSelectAll\" [disabled]=\"settings.limitSelection == selectedItems?.length\"/> <label> <span [hidden]=\"isSelectAll\">{{settings.selectAllText}}</span> <span [hidden]=\"!isSelectAll\">{{settings.unSelectAllText}}</span> </label> </div>    <div class=\"list-filter\" *ngIf=\"settings.enableSearchFilter\"> <span class=\"fa fa-search\"></span> <input type=\"text\" [placeholder]=\"settings.searchPlaceholderText\" [(ngModel)]=\"filter.itemName\"> </div>  <ul [style.maxHeight] = \"settings.maxHeight+'px'\"> <li *ngFor=\"let item of data | listFilter:filter; let i = index;\" (click)=\"onItemClick(item,i)\" class=\"pure-checkbox\"> <input type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"settings.limitSelection == selectedItems?.length && !isSelected(item)\"/> <label>{{item.itemName}}</label> </li> </ul> <h5 class=\"list-message\" *ngIf=\"data?.length == 0\">No Data Available</h5> </div> </div> </div>",
                host: { '[class]': 'defaultSettings.classes' },
                styles: [".cuppa-dropdown { position: relative; } .c-btn { display: inline-block; background: #fff; border: 1px solid #ccc; border-radius: 3px; font-size: 14px; color: #333; } .c-btn.disabled { background: #ccc; } .c-btn:focus { outline: none; } .selected-list .c-list { float: left; padding: 0px; margin: 0px; } .selected-list .c-list .c-token { list-style: none; padding: 0px 5px; background: #0079FE; color: #fff; border-radius: 2px; margin-right: 4px; float: left; } .selected-list .c-list .c-token .c-label { display: block; float: left; /*width: 50px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;*/ } .selected-list .c-list .c-token .fa-remove { margin-left: 1px; font-size: 12px; } .selected-list .fa-angle-down, .selected-list .fa-angle-up { font-size: 15pt; position: absolute; right: 10px; top: 25%; } .selected-list button { width: 100%; box-shadow: 0px 1px 5px #959595; padding: 10px; } .dropdown-list { position: absolute; padding-top: 14px; width: 100%; z-index: 9999; } .dropdown-list ul { padding: 0px; list-style: none; overflow: auto; margin: 0px; } .dropdown-list ul li { padding: 10px 10px; cursor: pointer; text-align: left; } .dropdown-list ul li:first-child { padding-top: 10px; } .dropdown-list ul li:last-child { padding-bottom: 10px; } .dropdown-list ul li:hover { background: #f5f5f5; } .dropdown-list ul::-webkit-scrollbar { width: 8px; } .dropdown-list ul::-webkit-scrollbar-thumb { background: #cccccc; border-radius: 5px; } .dropdown-list ul::-webkit-scrollbar-track { background: #f2f2f2; } .arrow-up { width: 0; height: 0; border-left: 13px solid transparent; border-right: 13px solid transparent; border-bottom: 15px solid #fff; margin-left: 15px; position: absolute; top: 0; } .list-area { border: 1px solid #ccc; border-radius: 3px; background: #fff; margin: 0px; box-shadow: 0px 1px 5px #959595; } .select-all { padding: 10px; border-bottom: 1px solid #ccc; text-align: left; } .list-filter { border-bottom: 1px solid #ccc; position: relative; } .list-filter input { border: 0px; width: 100%; height: 35px; padding: 0px 0px 0px 35px; } .list-filter input:focus { outline: none; } .list-filter .fa { position: absolute; top: 10px; left: 13px; color: #888; } .pure-checkbox input[type=\"checkbox\"] { border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; } .pure-checkbox input[type=\"checkbox\"]:focus + label:before, .pure-checkbox input[type=\"checkbox\"]:hover + label:before { border-color: #0079FE; background-color: #f2f2f2; } .pure-checkbox input[type=\"checkbox\"]:active + label:before { transition-duration: 0s; } .pure-checkbox input[type=\"checkbox\"] + label { position: relative; padding-left: 2em; vertical-align: middle; user-select: none; cursor: pointer; margin: 0px; color: #000; } .pure-checkbox input[type=\"checkbox\"] + label:before { box-sizing: content-box; content: ''; color: #0079FE; position: absolute; top: 50%; left: 0; width: 14px; height: 14px; margin-top: -9px; border: 2px solid #0079FE; text-align: center; transition: all 0.4s ease; } .pure-checkbox input[type=\"checkbox\"] + label:after { box-sizing: content-box; content: ''; background-color: #0079FE; position: absolute; top: 50%; left: 4px; width: 10px; height: 10px; margin-top: -5px; transform: scale(0); transform-origin: 50%; transition: transform 200ms ease-out; } .pure-checkbox input[type=\"checkbox\"]:disabled + label:before { border-color: #cccccc; } .pure-checkbox input[type=\"checkbox\"]:disabled:focus + label:before .pure-checkbox input[type=\"checkbox\"]:disabled:hover + label:before { background-color: inherit; } .pure-checkbox input[type=\"checkbox\"]:disabled:checked + label:before { background-color: #cccccc; } .pure-checkbox input[type=\"checkbox\"] + label:after { background-color: transparent; top: 50%; left: 4px; width: 8px; height: 3px; margin-top: -4px; border-style: solid; border-color: #ffffff; border-width: 0 0 3px 3px; border-image: none; transform: rotate(-45deg) scale(0); } .pure-checkbox input[type=\"checkbox\"]:checked + label:after { content: ''; transform: rotate(-45deg) scale(1); transition: transform 200ms ease-out; } .pure-checkbox input[type=\"radio\"]:checked + label:before { animation: borderscale 300ms ease-in; background-color: white; } .pure-checkbox input[type=\"radio\"]:checked + label:after { transform: scale(1); } .pure-checkbox input[type=\"radio\"] + label:before { border-radius: 50%; } .pure-checkbox input[type=\"checkbox\"]:checked + label:before { animation: borderscale 200ms ease-in; background: #0079FE; } .pure-checkbox input[type=\"checkbox\"]:checked + label:after { transform: rotate(-45deg) scale(1); } @keyframes borderscale { 50% { box-shadow: 0 0 0 2px #0079FE; } } .list-message { text-align: center; } "],
                providers: [DROPDOWN_CONTROL_VALUE_ACCESSOR]
            },] },
];
/**
 * @nocollapse
 */
AngularMultiSelect.ctorParameters = function () { return []; };
AngularMultiSelect.propDecorators = {
    'data': [{ type: _angular_core.Input },],
    'settings': [{ type: _angular_core.Input },],
    'onSelect': [{ type: _angular_core.Output, args: ['onSelect',] },],
    'onDeSelect': [{ type: _angular_core.Output, args: ['onDeSelect',] },],
    'onSelectAll': [{ type: _angular_core.Output, args: ['onSelectAll',] },],
    'onDeSelectAll': [{ type: _angular_core.Output, args: ['onDeSelectAll',] },],
};
var AngularMultiSelectModule = (function () {
    function AngularMultiSelectModule() {
    }
    return AngularMultiSelectModule;
}());
AngularMultiSelectModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                imports: [_angular_common.CommonModule, _angular_forms.FormsModule],
                declarations: [AngularMultiSelect, ClickOutsideDirective, ListFilterPipe],
                exports: [AngularMultiSelect, ClickOutsideDirective, ListFilterPipe]
            },] },
];
/**
 * @nocollapse
 */
AngularMultiSelectModule.ctorParameters = function () { return []; };

/**
 * Generated bundle index. Do not edit.
 */

exports.AngularMultiSelect = AngularMultiSelect;
exports.ClickOutsideDirective = ClickOutsideDirective;
exports.ListFilterPipe = ListFilterPipe;
exports.AngularMultiSelectModule = AngularMultiSelectModule;
exports.ɵa = DROPDOWN_CONTROL_VALUE_ACCESSOR;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular2-multiselect-dropdown.umd.js.map
