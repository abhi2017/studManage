var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Http } from '@angular/http';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
var ConfigLoader = (function () {
    function ConfigLoader() {
    }
    return ConfigLoader;
}());
export { ConfigLoader };
var ConfigStaticLoader = (function () {
    function ConfigStaticLoader(apiEndpoint) {
        if (apiEndpoint === void 0) { apiEndpoint = '/config.json'; }
        this.apiEndpoint = apiEndpoint;
    }
    ConfigStaticLoader.prototype.getApiEndpoint = function () {
        return this.apiEndpoint.toString();
    };
    return ConfigStaticLoader;
}());
export { ConfigStaticLoader };
var ConfigService = (function () {
    function ConfigService(http, loader) {
        this.http = http;
        this.loader = loader;
        this.settingsRepository = undefined;
    }
    ConfigService.prototype.init = function () {
        var _this = this;
        return this.http.get(this.loader.getApiEndpoint())
            .map(function (res) { return res.json(); })
            .toPromise()
            .then(function (settings) { return _this.settingsRepository = settings; })
            .catch(function () {
            throw new Error('Error: apiEndpoint unreachable!');
        });
    };
    ConfigService.prototype.getSettings = function (group, key) {
        if (!group)
            return this.settingsRepository;
        if (!this.settingsRepository[group])
            throw new Error("Error: No setting found with the specified group [" + group + "]!");
        if (!key)
            return this.settingsRepository[group];
        if (!this.settingsRepository[group][key])
            throw new Error("Error: No setting found with the specified group/key [" + group + "/" + key + "]!");
        return this.settingsRepository[group][key];
    };
    return ConfigService;
}());
ConfigService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Http,
        ConfigLoader])
], ConfigService);
export { ConfigService };
